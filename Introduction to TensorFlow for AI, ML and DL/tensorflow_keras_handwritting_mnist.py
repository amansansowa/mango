# -*- coding: utf-8 -*-
"""tensorflow_keras_handwritting_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K7ElTT3F7mTWG6rt7btwi4cP6M2nMgi-
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as ppy

# %matplotlib inline

#geting the fashion_mnist data set into a variable
mnist = keras.datasets.mnist

(mnist_train,mnist_train_label),(mnist_test,mnist_test_label) = mnist.load_data()

#normalising by dividing the train and test data by maximum number of pixles = 255
mnist_train = mnist_train/255 
mnist_test = mnist_test/255

#visualising the data
print(mnist_train[4])
ppy.imshow(mnist_train[4])

#we define our model here with 10 ouput classes
model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape =(28,28)),
                                  tf.keras.layers.Dense(256, activation = tf.nn.relu),
                                  tf.keras.layers.Dense(10, activation = tf.nn.softmax)])

model.compile(optimizer = 'adam',
            loss='sparse_categorical_crossentropy',
            metrics = ['accuracy'])

class my_Callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs= {}):
    if(logs.get('acc')>0.99):
      print("\n reached desired accuracy, terminating training \n")
      self.model.stop_training = True

callbacks = my_Callback()
model.fit(mnist_train,mnist_train_label,epochs = 10, callbacks=[callbacks])

model.evaluate(mnist_test,mnist_test_label)

classifications = model.predict(mnist_test)
print(classifications[0])
print(mnist_test_label[0])

